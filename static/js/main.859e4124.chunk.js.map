{"version":3,"sources":["logo.svg","Components/form/MyResponsiveBubble.js","Components/Bubbles/BubblesPage.js","App.js","reportWebVitals.js","index.js"],"names":["MyResponsiveBubble","props","root","console","log","style","height","width","margin","top","right","bottom","left","identity","value","colors","scheme","padding","labelTextColor","from","modifiers","borderWidth","defs","id","background","color","spacing","fill","match","depth","animate","motionStiffness","motionDamping","require","BubblesPage","useState","Date","now","setPoints","useEffect","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wmxFAAe,I,uECuCAA,EAlCY,SAACC,GAAW,IAE/BC,EAAQD,EAARC,KAGP,OAFAC,QAAQC,IAAIF,GAEL,qBAAMG,MAAO,CAACC,OAAQ,QAASC,MAAO,QAAtC,SAEN,cAAC,IAAD,CACCF,MAAO,CAACE,MAAO,OAAQD,OAAQ,QAC/BJ,KAAMA,EACNM,OAAQ,CAACC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAC/CC,SAAS,OACTC,MAAM,MACNC,OAAQ,CAACC,OAAQ,QACjBC,QAAS,EACTC,eAAgB,CAACC,KAAM,QAASC,UAAW,CAAC,CAAC,SAAU,MACvDC,YAAa,EACbC,KAAM,CACL,CACCC,GAAI,QACJC,WAAY,OACZC,MAAO,UACPC,QAAS,IAGXC,KAAM,CAAC,CAACC,MAAO,CAACC,MAAO,GAAIN,GAAI,UAC/BO,SAAS,EACTC,gBAAiB,GACjBC,cAAe,OCrBZ9B,G,OALe+B,EAAQ,KACfA,EAAQ,KAEbA,EAAQ,KACHA,EAAQ,KACTA,EAAQ,MAyKNC,EAvKK,WAAO,IAAD,EACSC,mBAAS,IAAIC,KAAKA,KAAKC,MAAQ,QADxC,gCAEKF,mBAAS,IAAIC,OAFlB,gCAGGD,mBAAS,KAHZ,gCAIGA,mBAAS,OAJZ,mBAIVG,GAJU,aAKOH,mBAAS,MALhB,gCAMOA,mBAAS,OANhB,gCAOWA,sBAPX,6BASzBI,qBAAU,WAeT,IAAMrC,EAAO+B,EAAQ,KACrB9B,QAAQC,IAAIF,GACZoC,EAAUpC,KAER,IAoHH,OACC,8BAgBC,cAAC,EAAD,CAAoBA,KAAMA,OCnKdsC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.859e4124.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// install (please make sure versions match peerDependencies)\n// yarn add @nivo/core @nivo/circle-packing\nimport {ResponsiveBubble} from '@nivo/circle-packing'\nimport React from \"react\";\n\nconst MyResponsiveBubble = (props) => {\n\n\tconst {root} = props\n\tconsole.log(root)\n\n\treturn <div  style={{height: \"900px\", width: \"100%\"}}>\n\n\t\t<ResponsiveBubble\n\t\t\tstyle={{width: \"100%\", height: \"100%\"}}\n\t\t\troot={root}\n\t\t\tmargin={{top: 20, right: 20, bottom: 20, left: 20}}\n\t\t\tidentity=\"name\"\n\t\t\tvalue=\"loc\"\n\t\t\tcolors={{scheme: 'nivo'}}\n\t\t\tpadding={3}\n\t\t\tlabelTextColor={{from: 'color', modifiers: [['darker', 0.8]]}}\n\t\t\tborderWidth={1}\n\t\t\tdefs={[\n\t\t\t\t{\n\t\t\t\t\tid: 'lines',\n\t\t\t\t\tbackground: 'none',\n\t\t\t\t\tcolor: 'inherit',\n\t\t\t\t\tspacing: 5\n\t\t\t\t}\n\t\t\t]}\n\t\t\tfill={[{match: {depth: 1}, id: 'lines'}]}\n\t\t\tanimate={false}\n\t\t\tmotionStiffness={40}\n\t\t\tmotionDamping={3}\n\t\t/>\n\t</div>\n\n}\n\nexport default MyResponsiveBubble;","import React, {useState, useEffect, useContext} from \"react\";\nimport DateTime from \"../form/DateTime\";\nimport MyResponsiveBubble from \"../form/MyResponsiveBubble\";\nimport {kdTree} from \"kd-tree-javascript/kdTree\"\nimport MyBubble from \"../form/myBubble\";\nimport {Button} from \"@material-ui/core\";\n\nconst createKDTree = require(\"static-kdtree\")\nconst axios = require('axios');\n// var httpsAgent = require('https-agent');\nvar fs = require('fs');\nconst https = require('https');\nconst root = require('../../bubble_data_comments.json')\n\nconst BubblesPage = () => {\n\tconst [startDate, setStartDate] = useState(new Date(Date.now() - 24 * 60 * 60 * 1000));\n\tconst [endDate, setEndDate] = useState(new Date());\n\tconst [radius, setRadius] = useState(0.1);\n\tconst [points, setPoints] = useState(null);\n\tconst [clusters, setClusters] = useState(null);\n\tconst [nivoData, setNivoData] = useState(null);\n\tconst [embeddings, setEmbeddings] = useState();\n\n\tuseEffect(() => {\n\t\t/*let currentPoints = [];\n\t\tfor (let i = 0; i < 100; i++) {\n\t\t\tlet point = {\n\t\t\t\ttext: \"Robot_\" + (i * 10),\n\t\t\t\taxes: [],\n\t\t\t\tcluster: 0\n\t\t\t};\n\n\t\t\tfor (let j = 0; j < 4; j++) {\n\t\t\t\tpoint[\"axes\"].push(Math.floor(Math.random() * 5));\n\t\t\t}\n\t\t\tcurrentPoints.push(point);\n\t\t}\n\t\tsetPoints(currentPoints)*/\n\t\tconst root = require('../../bubble_data_comments.json')\n\t\tconsole.log(root)\n\t\tsetPoints(root)\n\n\t}, [])\n\n\t/*useEffect(() => {\n\t\tif (points) {\n\n\t\t\tlet curr_embeddings = points.map(el => el[\"axes\"])\n\t\t\tconst kdTree = createKDTree(curr_embeddings)\n\n\t\t\tlet neighbors = []\n\t\t\tpoints.forEach((el, i) => {\n\n\t\t\t\tlet cluster = []\n\t\t\t\tkdTree.rnn(el[\"axes\"], radius, point => {\n\t\t\t\t\tcluster.push(point)\n\t\t\t\t})\n\n\t\t\t\tneighbors.push(cluster)\n\t\t\t})\n\n\t\t\tlet exist_indexes = []\n\t\t\tlet current_clusters = []\n\t\t\tneighbors.forEach((el, i) => {\n\t\t\t\tlet cluster = []\n\n\t\t\t\tif (el.length > 1) {\n\n\t\t\t\t\tel.forEach(dot => {\n\t\t\t\t\t\tif (!exist_indexes.includes(dot)) {\n\t\t\t\t\t\t\tcluster.push(dot);\n\t\t\t\t\t\t\texist_indexes.push(dot)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet sub_cluster = []\n\t\t\t\t\t\tkdTree.rnn(points[dot][\"axes\"], radius, point => {\n\t\t\t\t\t\t\tsub_cluster.push(point)\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tsub_cluster.forEach(sec_dot => {\n\t\t\t\t\t\t\tif (!exist_indexes.includes(sec_dot)) {\n\t\t\t\t\t\t\t\tcluster.push(sec_dot)\n\t\t\t\t\t\t\t\texist_indexes.push(sec_dot)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\n\t\t\t\t\tif (cluster != [] && cluster.length > 1) {\n\t\t\t\t\t\tconst finally_cluster = new Set(cluster);\n\t\t\t\t\t\tcurrent_clusters.push(finally_cluster)\n\t\t\t\t\t\tfinally_cluster.forEach(value => {\n\t\t\t\t\t\t\tpoints[value][\"cluster\"] = i\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tsetClusters(current_clusters)\n\t\t}\n\n\t}, [points])*/\n\n\t/*useEffect(() => {\n\t\tif (clusters) {\n\t\t\tlet labels = {}\n\t\t\tlet clusters_forNivo = clusters.map((cluster, i) => {\n\t\t\t\tlet current_cluster = [...cluster];\n\t\t\t\tlet cluster_num = points[current_cluster[0]]['cluster'];\n\t\t\t\tlabels[cluster_num] = [];\n\n\t\t\t\tcurrent_cluster.map(point_index => {\n\t\t\t\t\tlet current_point = points[point_index];\n\t\t\t\t\tlet label = {\n\t\t\t\t\t\tname: current_point['text'],\n\t\t\t\t\t\tloc: 13\n\t\t\t\t\t}\n\t\t\t\t\tlabels[cluster_num].push(label)\n\t\t\t\t})\n\n\t\t\t\treturn {name: `Theme #${i}`, children: labels[cluster_num]}//, children\n\t\t\t})\n\t\t\tconst nivo_data = {\n\t\t\t\tname: \"nivo\",\n\t\t\t\tchildren: clusters_forNivo\n\t\t\t}\n\n\t\t\tsetNivoData(nivo_data)\n\t\t\tconsole.log(\"NIVO!\",nivo_data)\n\t\t}\n\t}, [clusters])*/\n\n/*\tconst sendRequest = () => {\n\t\tconst formData = {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {'content-type': 'application/javascript'},\n\t\t\tbody: {\n\t\t\t\tradius: 1,\n\t\t\t\tsentences: [\"супервыгодный интернет\", \"президент кыргызстана\"],\n\t\t\t\ttable: \"politics\"\n\t\t\t}\n\t\t}\n\n\t\tconst agent = new https.Agent({\n\t\t\trejectUnauthorized: false\n\t\t});\n\t\taxios.post('https://lukoshkoapi.kloop.io/api/v1/text_range_search/', formData.body, {httpsAgent: agent});\n\t}\n*/\n\n\tconst returnStartDate = (date) => {\n\t\tsetStartDate(date)\n\t}\n\n\tconst returnEndDate = (date) => {\n\t\tsetEndDate(date)\n\t}\n\n\n\treturn (\n\t\t<div>\n\t\t\t{/*<div>\n\t\t\t\t<h1>Start</h1>\n\t\t\t\t<Button variant='contained' color='secondary' onClick={() => sendRequest()}>SendRequest</Button>\n\t\t\t\t<DateTime\n\t\t\t\t\tdateLabel={\"Выберите дату начала\"}\n\t\t\t\t\ttimeLabel={\"Выберите время начала\"}\n\t\t\t\t\treturnAnswer={returnStartDate}\n\t\t\t\t\tdate={startDate}/>\n\t\t\t\t<h1>End</h1>\n\t\t\t\t<DateTime\n\t\t\t\t\tdateLabel={\"Выберите дату конца\"}\n\t\t\t\t\ttimeLabel={\"Выберите время конца\"}\n\t\t\t\t\treturnAnswer={returnEndDate}\n\t\t\t\t\tdate={endDate}/>\n\t\t\t</div>*/}\n\t\t\t<MyResponsiveBubble root={root}/>\n\n\t\t</div>\n\t)\n}\n\nexport default BubblesPage;","import logo from './logo.svg';\nimport './App.css';\nimport BubblesPage from \"./Components/Bubbles/BubblesPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BubblesPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}